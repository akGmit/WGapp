Andrius Korsakas project work Log

Week Ending 10/2
Tasks:
    1. Collaborate on a project plan.                                                                               DONE
    2. Research various design and approach possibilities.                                                          DONE
    3. Implementing and testing of some basic functionalities.                                                      DONE
    4. Work on current server/client backend skeleton testing various functionalities.(Focus on chat, work group)   DONE

Week notes:
    Decided to use JavaScript for server implementation. Will be using Node.js server environment. Using Express framework for Node.js and Socket.io API for server functionality.
    Using Node as server side environment should provide possibility of app versions on different platforms(Mobile) in the future.
    Current idea of design:
        Server using Socket.IO API responds to various events sent by client app.
        Client app sends events to server and gets response.
        Try to implement Observer OO Design pattern in client app.
=======

Week ending 17/02
Tasks:
    1.  Create server-side User/Client class.                                       DONE
    2.  Create server-side WorkGroup class.                                         DONE  
    3.  Implement server responses to client app events sent over Socket.IO API.    DONE
    4.  Create User/Client class in client app.                                     DONE
    5.  Create possibly required interfaces for app.                                DONE
    6.  Create client to server connection and various functions.                   DONE
    7.  Create client side class to deal with responses from server.                DONE
    8.  Implement class responsible of sending requests to server.                  DONE

Week notes:
    Server-Client connection established. Considering adding more functionality for user information.
    Currently user are stored just as long as connection session lasts, might implement user registration with help of some database.
    Observer OOD pattern proved itself useful and seems to fit right in with functionality of an app.
    Quick walk-through of current state of an app:
        Client side:
            1. User must set his username to be able to continue. (At the moment, all connections are session long)
            2. After step 1, there is two choices crete or join existing group.
            3. Join group: provide groups name and correct password.
            4. Create group: provide group name and password, user whom created the group will be assgned group admin status.(Which currently means nothing)
            5. Start sending and recieving messages.
    Ideas for upcoming week:
        Look into user registration, so users could register and data would be saved at some DB or server.?
        Maybe implement admin rights.?
        Implement invatation to grop by email. ?
=======

Week ending 24/02
Tasks:
    1. Testing server and client side implementations.                              DONE
    2. Working on validation of inputs at server and client. (Continous task)       DONE
    3. Improving overall code design and modularity. (Continous task)               DONE
    4. Research and test file sharing technologies.                                 DONE    
    5. Briefly document current project, will be useful for final documentation.    DONE

Week notes:
    Task 3: found promising bridge API to connect node server framework wiht existing Java APIs. Link: https://github.com/joeferner/node-java.
        Will require to create java API with all the desired file transfer functions and inject it into existing server implementation. Based on brief research it should serve well 
        with current server and also improve performance since this JVM will be created for executing imported java API functions.
    Ideas:
        ----In MainViewConroller could be possible to extract Observer interface implemented method to separate class. Would improve design and readability.
        ----Need to work out better implementation of setMainUIView method in MainViewController class.
        ----Maybe make PopUpController implement Observer interface so that any error events could be dealt without closing the popup.
        ----Implement user registration, not just single session user
=======

Week ending 03/03
Tasks:
    1. Implement user registration:
            -set up MongoDB for user data storage
            -set up server side user reg functionality
            -set up client side user reg func and validation
    2. Abstract Observer method implementation from MainViewController to improve readability
    3. Create special class to hold static event values.         


